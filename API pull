!pip install textblob
!pip install ipywidgets

import requests
import pandas as pd
from textblob import TextBlob
import os
import matplotlib.pyplot as plt


# NewsAPI pull
url = 'https://newsapi.org/v2/everything'
parameters = {
    'q': 'business OR industry OR technology',  # Search keywords
    'from': '2024-01-01',                       # Start date for news
    'sortBy': 'publishedAt',                    # Sorting articles by latest
    'apiKey': '0c98db7477374ac68141c07f38495168'                    # Replace with your News API key
}

# Make the request to the News API
response = requests.get(url, params=parameters)

# Check if the request was successful
if response.status_code == 200:
    data = response.json()  # Parse the response as JSON
    articles = data['articles']

    # Extract the relevant information and convert it to a DataFrame
    news_data = []
    for article in articles:
        news_data.append({
            'title': article['title'],
            'description': article['description'],
            'content': article['content'],
            'publishedAt': article['publishedAt'],
            'source': article['source']['name']
        })

    df = pd.DataFrame(news_data)
    print(df.head())

    # Save the data to a CSV file
    df.to_csv('news_data.csv', index=False)


df = pd.read_csv('news_data.csv')

df['publishedAt'] = pd.to_datetime(df['publishedAt'], errors='coerce')
print(df['publishedAt'].isna().sum())
df = df.dropna(subset=['publishedAt'])
else:
    print(f"Error: {response.status_code} - {response.text}")

def get_sentiment(text):
    analysis = TextBlob(str(text))
    return analysis.sentiment.polarity

df['sentiment_score'] = df['content'].apply(get_sentiment)
print(df[['title', 'sentiment_score']])

mean_sentiment_by_source = df.groupby('source')['sentiment_score'].mean().sort_values()
mean_sentiment_by_source.plot(kind='bar', figsize=(10, 5))
plt.xlabel('News Source')
plt.ylabel('Average Sentiment Score')
plt.title('Average Sentiment Score by News Source')
plt.show()



df['publishedAt'] = pd.to_datetime(df['publishedAt'])
df.set_index('publishedAt', inplace=True)
df['sentiment_score'] = pd.to_numeric(df['sentiment_score'], errors='coerce')
df.dropna(subset=['sentiment_score'], inplace=True)
print(f"Data after handling 'sentiment_score': {df.shape[0]} rows")
resampled_sentiment = df['sentiment_score'].resample('QE').mean()
print(f"Resampled sentiment data points: {resampled_sentiment.dropna().shape[0]}")
df['sentiment_score'].plot(kind='line', figsize=(10, 5))
plt.xlabel('Date')
plt.ylabel('Sentiment Score')
plt.title('Sentiment Score Over Time')
plt.show()

